#!/bin/bash

IP_HOST=<%= machine.external_ip %>

<% if has_proxy? && proxy_ip %>
IP_PRIVATE_PROXY=<%= proxy_ip %>
<% end %>

MASK_INTERNAL=<%= netmask %>

# delete existing rules
iptables -F
iptables -X

# delete existing NAT rules
iptables -t nat -F
iptables -t nat -X

# default policy is drop
iptables -P INPUT   DROP
iptables -P FORWARD DROP
iptables -P OUTPUT  DROP

echo -stateful-

iptables -A INPUT   -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A OUTPUT  -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT

echo -spoofing-

iptables -A INPUT -i eth0  -s 10.0.0.0/8 -j DROP
iptables -A INPUT -i eth0  -s 172.16.0.0/12 -j DROP
iptables -A INPUT -i eth0  -s 192.168.0.0/16 -j DROP

echo -pre-routing-

<% if has_proxy? %>
# forward all http(s) traffic to proxy
iptables -t nat -A PREROUTING -p tcp -d $IP_HOST --dport 80  -j DNAT --to-destination $IP_PRIVATE_PROXY:80
iptables -t nat -A PREROUTING -p tcp -d $IP_HOST --dport 443 -j DNAT --to-destination $IP_PRIVATE_PROXY:443
<% end %>

echo -post-routing-

iptables -t nat -A POSTROUTING -s $MASK_INTERNAL -o eth0 ! -d $MASK_INTERNAL -j SNAT --to $IP_HOST
iptables -t nat -A POSTROUTING -s $MASK_INTERNAL -j MASQUERADE

echo -input / output-

# loopback
iptables -A INPUT -i lo -j ACCEPT
iptables -A OUTPUT -o lo -j ACCEPT

# SSH
iptables -A INPUT -p tcp --dport 22 -m state --state NEW -j ACCEPT

# ICMP
iptables -A INPUT -p icmp --icmp-type echo-reply -j ACCEPT
iptables -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT
iptables -A INPUT -p icmp --icmp-type destination-unreachable -j ACCEPT
iptables -A OUTPUT -p icmp --icmp-type destination-unreachable -j ACCEPT
iptables -A INPUT -p icmp --icmp-type source-quench -j ACCEPT
iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT
iptables -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT
iptables -A INPUT -p icmp --icmp-type time-exceeded -j ACCEPT
iptables -A INPUT -p icmp --icmp-type parameter-problem -j ACCEPT

iptables -A INPUT -p icmp --fragment -j LOG
iptables -A INPUT -p icmp --fragment -j DROP

# log & drop
iptables -A INPUT -p tcp -m limit --limit 5/min -j LOG --log-level debug --log-prefix "!INPUT_DROP! ** TCP **  "
iptables -A INPUT -p udp -m limit --limit 5/min -j LOG --log-level debug --log-prefix "!INPUT_DROP! ** UDP **  "
iptables -A INPUT -p icmp -m limit --limit 5/min -j LOG --log-level debug --log-prefix "!INPUT_DROP! ** ICMP **  "
iptables -A INPUT -m pkttype --pkt-type multicast -m limit --limit 5/min -j LOG --log-level debug --log-prefix "!INPUT_DROP! ** MCAST **  "
iptables -A OUTPUT -p tcp -m limit --limit 5/min -j LOG --log-level debug --log-prefix "!OUTPUT_DROP! ** TCP **  "
iptables -A OUTPUT -p udp -m limit --limit 5/min -j LOG --log-level debug --log-prefix "!OUTPUT_DROP! ** UDP **  "
iptables -A OUTPUT -p icmp -m limit --limit 5/min -j LOG --log-level debug --log-prefix "!OUTPUT_DROP! ** ICMP **  "
iptables -A OUTPUT -m pkttype --pkt-type multicast -m limit --limit 5/min -j LOG --log-level debug --log-prefix "!OUTPUT_DROP! ** MCAST **  "

echo -forward-

# debug override : allow all forward traffic
#iptables -I FORWARD -j ACCEPT

# allow all traffic to be forwarded across the bridges
iptables -A FORWARD -m physdev --physdev-is-bridged -j ACCEPT

<% if has_proxy? && proxy_ip %>
# allow incoming http traffic to reach the proxy
iptables -A FORWARD -d $IP_PRIVATE_PROXY -p tcp --dport 80 -m state --state NEW -j ACCEPT
iptables -A FORWARD -d $IP_PRIVATE_PROXY -p tcp --dport 443 -m state --state NEW -j ACCEPT

# allow http traffic from the proxy to the other VMs
iptables -A FORWARD -s $IP_PRIVATE_PROXY -d $MASK_INTERNAL -p tcp --dport 80 -j ACCEPT
iptables -A FORWARD -s $IP_PRIVATE_PROXY -d $MASK_INTERNAL -p tcp --dport 443 -j ACCEPT

# allow http traffic from the other VMs back to the proxy
iptables -A FORWARD -s $MASK_INTERNAL -d $IP_PRIVATE_PROXY -p tcp --sport 80 -m state --state NEW -j ACCEPT
iptables -A FORWARD -s $MASK_INTERNAL -d $IP_PRIVATE_PROXY -p tcp --sport 443 -m state --state NEW -j ACCEPT

# outgoing http from proxy
iptables -A FORWARD -s $IP_PRIVATE_PROXY -p tcp --sport 80 -m state --state NEW -j ACCEPT
iptables -A FORWARD -s $IP_PRIVATE_PROXY -p tcp --sport 443 -m state --state NEW -j ACCEPT
<% end %>

# icmp forwarding for internal networks
iptables -A FORWARD -p icmp -s $MASK_INTERNAL -m state --state NEW -j ACCEPT

# dns forwarding for internal networks
iptables -A FORWARD -s $MASK_INTERNAL -p tcp --dport 53 -m state --state NEW -j ACCEPT
iptables -A FORWARD -s $MASK_INTERNAL -p udp --dport 53 -m state --state NEW -j ACCEPT

# log & drop
iptables -A FORWARD -p tcp -m limit --limit 5/min -j LOG --log-level debug --log-prefix "!FORWARD__DROP! ** TCP **  "
iptables -A FORWARD -p udp -m limit --limit 5/min -j LOG --log-level debug --log-prefix "!FORWARD__DROP! ** UDP **  "
iptables -A FORWARD -p icmp -m limit --limit 5/min -j LOG --log-level debug --log-prefix "!FORWARD__DROP! ** ICMP **  "
iptables -A FORWARD -m pkttype --pkt-type multicast -m limit --limit 5/min -j LOG --log-level debug --log-prefix "!FORWARD__DROP! ** MCAST **  "

echo -relax and enjoy-
