require "redis"
require "json"

on :init do |plugin|
  plugin.state[:redis] = Redis.new
end

on :before_execute do |plugin, payload|
  request = payload[:request]

  request_idx = Thread.current["idx"] || 0
  request_idx += 1
  Thread.current["idx"] = request_idx

  command_id = [ Thread.current.object_id, request_idx ].join("-")

  call_stack = Thread.current["call_stack"] || []
  call_stack << {
    name: request.command.short_name,
    id: command_id
  }
  Thread.current["call_stack"] = call_stack

  is_core = request.command.plugin.options[:core]
  unless is_core
    redis = plugin.state[:redis]
    redis.publish("vop_log", {
      id: command_id,
      state: "before",
      phase: "before",
      origin: request.origin,
      command: request.command.name,
      params: request.param_values,
      level: call_stack.size
    }.to_json())
  end
end

on :after_execute do |plugin, payload|
  request = payload[:request]
  response = payload[:response]

  begin
    call_stack = Thread.current["call_stack"]
    unless call_stack.nil?
      record = call_stack.pop

      if call_stack.size >= 0
        is_core = request.command.plugin.options[:core]
        unless is_core
          #puts "*** executed #{request.command.name} #{response.status} #{is_core ? "[core]" : ""} +++"
          redis = plugin.state[:redis]
          log_data = {
            id: record[:id],
            state: "after",
            phase: "after",
            origin: request.origin,
            command: request.command.name,
            params: request.param_values,
            level: call_stack.size,
            preview: response.result.to_s[0..50]
          }
          if response
            log_data[:status] = response.status
          end
          redis.publish("vop_log", log_data.to_json())
        end
      end

      if call_stack.size == 0
        Thread.current["call_stack"] = nil
      else
        Thread.current["call_stack"] = call_stack
      end
    end
  rescue => e
    $logger.error "Problem while logging : #{e.message}"
  end
end
